#!/bin/bash
OC_SOURCE="/srv/http/owncloud"
WORKDIR="/tmp/oc-docker"

SQL=$1
PORT=`python -c 'import socket; s=socket.socket(); s.bind(("", 0)); print(s.getsockname()[1]); s.close()'`
NAME="oc-$PORT";
SQL_PASS=`< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c32;echo;`
 
mkdir -p "$WORKDIR/$NAME/data"
mkdir -p "$WORKDIR/$NAME/config"
mkdir -p "$WORKDIR/$NAME/data-autotest"

PHP_VERSION=$2
PHP_VERSION=${PHP_VERSION:-5}

if [ "$PHP_VERSION" != "5" ] && [ "$PHP_VERSION" != "7" ]; then
	echo "invalid php version"
	exit
fi;


# remove sql and php version from args
shift
shift

LINK=""
EXTRA_ENV=""
EXTRA_CONTAINERS=""

for arg in "$@"
do
	if [ "$arg" = "s3" ]; then
		docker run --name "$NAME-s3" -d lphoward/fake-s3
		LINK="$LINK --link $NAME-s3:s3"
		EXTRA_CONTAINERS="$EXTRA_CONTAINERS,$NAME-s3"
		EXTRA_ENV="$EXTRA_ENV -e S3=1"
	fi
done

BLACKFIRE_RUNNING=$(docker inspect --format="{{ .State.Running }}" blackfire 2> /dev/null)
BLACKFIRE_EXIT_CODE=$?
if [ -z "$BLACKFIRE_SERVER_TOKEN" ] && [ $BLACKFIRE_EXIT_CODE -eq 1 ]; then # we either need the blackfire config or already have an existing container
	echo "Set \$BLACKFIRE_SERVER_TOKEN and \$BLACKFIRE_SERVER_ID to enable blackfire integration (https://blackfire.io/docs/integrations/docker)"
	LINK_BLACKFIRE=""
else
	# ensure blackfire agent is running
	if [ $BLACKFIRE_EXIT_CODE -eq 1 ]; then
		docker run --name="blackfire" -d -e BLACKFIRE_SERVER_ID=$BLACKFIRE_SERVER_ID -e BLACKFIRE_SERVER_TOKEN=$BLACKFIRE_SERVER_TOKEN blackfire/blackfire
	elif [ "$BLACKFIRE_RUNNING" == "false" ]; then
		docker start blackfire
	fi;
	LINK_BLACKFIRE="--link blackfire:blackfire"
fi;

WEBROOT="/var/www/html"
VOLUMES="-v $OC_SOURCE:$WEBROOT -v $WORKDIR/$NAME/data:$WEBROOT/data -v $WORKDIR/$NAME/config:$WEBROOT/config -v $WORKDIR/$NAME/data-autotest:$WEBROOT/data-autotest"
# DOCKER_IMAGE="icewind1991/nextcloud-dev:$PHP_VERSION"
DOCKER_IMAGE="nc-dev"

if [ "$SQL" = "mysql" ]; then
	docker run --name "$NAME-mysql" -e MYSQL_ROOT_PASSWORD=$SQL_PASS -e MYSQL_PASSWORD=owncloud -e MYSQL_USER=owncloud -e MYSQL_DATABASE=owncloud -d mysql:latest
	docker run --name $NAME -d -p $PORT:80 $LINK_BLACKFIRE --link "$NAME-mysql:mysql" $LINK $EXTRA_ENV -e SQL=mysql $VOLUMES $DOCKER_IMAGE
	echo "$NAME,$NAME-mysql$EXTRA_CONTAINERS"
elif [ "$SQL" = "pgsql" ]; then
	docker run --name "$NAME-pgsql" -e POSTGRES_PASSWORD=owncloud -e POSTGRES_USER=owncloud -e POSTGRES_DATABASE=owncloud -d postgres:latest
	docker run --name $NAME -d -p $PORT:80 $LINK_BLACKFIRE --link "$NAME-pgsql:pgsql" $LINK $EXTRA_ENV -e SQL=pgsql $VOLUMES $DOCKER_IMAGE
	echo "$NAME,$NAME-pgsq$EXTRA_CONTAINERSl"
elif [ "$SQL" = "oci" ]; then
	docker run --name "$NAME-oci" -d wnameless/oracle-xe-11g
	docker run --name $NAME -d -p $PORT:80 $LINK_BLACKFIRE --link "$NAME-oci:oci" $LINK $EXTRA_ENV -e SQL=oci $VOLUMES $DOCKER_IMAGE
	echo "$NAME,$NAME-oci$EXTRA_CONTAINERS"
else
	docker run --name $NAME -d -p $PORT:80 $LINK_BLACKFIRE $LINK $EXTRA_ENV -e SQL=sqlite $VOLUMES $DOCKER_IMAGE
	echo "$NAME$EXTRA_CONTAINERS"
fi

echo "Running on http://localhost:$PORT" 
